// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MEMBER
  GUEST
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  imageUrl String
  email    String @unique

  role MemberRole @default(GUEST)

  servers      Server[]
  members      Member[]
  Post         Post[]
  Comment      Comment[]
  NestComments NestComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members Member[]
  years   Year[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name   String
  email  String
  phone  String
  amount Float

  donations Donation[]

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  dtime  String
  amount Float

  memberId String  @db.ObjectId
  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Year {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  year     Int       @unique
  expenses Expense[]

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Expense {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  amount        Float
  paymentStatus String
  yearId        String @db.ObjectId
  year          Year   @relation(fields: [yearId], references: [id], onDelete: Cascade)
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug      String   @unique
  title     String
  desc      String
  img       String?
  views     Int      @default(0)
  catSlug   String
  cat       Category @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])

  comments Comment[]

  createdAt DateTime @default(now())
}

model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  userEmail String
  user      User   @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post   @relation(fields: [postSlug], references: [slug], onDelete: Cascade)

  NestComments NestComment[]

  createdAt DateTime @default(now())
}

model NestComment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  desc String

  userEmail String
  user      User   @relation(fields: [userEmail], references: [email])

  commentId  String   @db.ObjectId
  parentNest Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())
}

// information headline eg. events, meeting
model Info {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
}
